import logging
import psycopg2

class Comp:
    def __init__(self, table, logfile) :
        self.connection = psycopg2.connect(user='postgres', password='1234', host='localhost', port=5432, database='northwind')
        self.table = table
        self.primary_key = ''
        self.logger = logging.getLogger(logfile)
        self.logger.setLevel(logging.INFO)
        self.handler = logging.FileHandler(logfile)
        self.handler.setLevel(logging.DEBUG)
        self.formatter = logging.Formatter('%(asctime)s - %(name)s - %(funcName)s - %(lineno)d - %(levelname)s - %(message)s')
        self.handler.setFormatter(self.formatter)
        self.logger.addHandler(self.handler)

    def create_table(self, values={'name': 'varchar(50)', 'address': 'varchar(50)', 'phone': 'int'}, pk=''):
        try:  
            self.primary_key = pk
            values[self.primary_key] = values[self.primary_key] + ' PRIMARY KEY'
            cursor=self.connection.cursor()
            res = []
            for i, j in values.items():
                res.append(str(i)+' '+str(j))
            query = f"""create table {self.table} ({', '.join(res)})"""
            print(query)
    
            cursor.execute(query)
            self.connection.commit()
            self.logger.info("table created successfully")
        except Exception as e:
            self.logger.error("Error creating table:", e)  
    

    def insert_table(self, query_details):
            try:

                cursor = self.connection.cursor()
                columns = ', '.join(query_details.keys())
                query_values = ', '.join([str(f"'{val}'") for val in query_details.values()])
                query = f"""insert into {self.table}({columns}) values({query_values})"""
                print(query)
                cursor.execute(query)
                self.connection.commit()
                self.logger.info("Table inserted successfully")
            except Exception as e:
                self.logger.info(f"Error while inserting table: {e}")

    def update_table(self, values):
        try:
         
            cursor = self.connection.cursor()
            res = []
            for i, j in values.items():
                res.append(str(i) + " = '" + str(j) + "'")
            set = ", ".join(res)
            query = f"update {self.table} set {set}"
        
            cursor.execute(query)
            self.connection.commit()
            self.logger.info( "Table updated successfully")
        except Exception as e:
            self.logger.info(f"Error while updating table: {e}")
            self.connection.rollback()

    def delete_table(self, values):
        try:

            cursor = self.connection.cursor()
            res= []
            for i, j in values.items():
                res.append(str(i) + " = '" + str(j) + "'")
            where = " and ".join(res)
            query = f"delete from {self.table} where {where}"
            cursor.execute(query)
            self.connection.commit()
            self.logger.info("table deleted successfully")
        except Exception as e:
            self.logger.error(f"Error while deleting table")

compobj=Comp('table9001', logfile='test.log')

compobj.create_table(pk='phone')
query_details = {'name':'akhil','address':'hyd','phone': 9954}
compobj.insert_table(query_details)
# Comp.update_table({})
# Comp.delete_table({'address': 'hyd'})
